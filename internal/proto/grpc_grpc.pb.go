// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.27.0--rc1
// source: grpc.proto

package urlShort

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	URLShortenerService_ShortenURL_FullMethodName      = "/urlshortener.URLShortenerService/ShortenURL"
	URLShortenerService_GetURL_FullMethodName          = "/urlshortener.URLShortenerService/GetURL"
	URLShortenerService_ShortenURLBatch_FullMethodName = "/urlshortener.URLShortenerService/ShortenURLBatch"
	URLShortenerService_GetURLsByUserID_FullMethodName = "/urlshortener.URLShortenerService/GetURLsByUserID"
	URLShortenerService_DeleteURLs_FullMethodName      = "/urlshortener.URLShortenerService/DeleteURLs"
	URLShortenerService_GetStats_FullMethodName        = "/urlshortener.URLShortenerService/GetStats"
)

// URLShortenerServiceClient is the client API for URLShortenerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type URLShortenerServiceClient interface {
	ShortenURL(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	GetURL(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	ShortenURLBatch(ctx context.Context, opts ...grpc.CallOption) (URLShortenerService_ShortenURLBatchClient, error)
	GetURLsByUserID(ctx context.Context, in *Request, opts ...grpc.CallOption) (URLShortenerService_GetURLsByUserIDClient, error)
	DeleteURLs(ctx context.Context, opts ...grpc.CallOption) (URLShortenerService_DeleteURLsClient, error)
	GetStats(ctx context.Context, in *Request, opts ...grpc.CallOption) (*StatsResponse, error)
}

type uRLShortenerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewURLShortenerServiceClient(cc grpc.ClientConnInterface) URLShortenerServiceClient {
	return &uRLShortenerServiceClient{cc}
}

func (c *uRLShortenerServiceClient) ShortenURL(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, URLShortenerService_ShortenURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLShortenerServiceClient) GetURL(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, URLShortenerService_GetURL_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uRLShortenerServiceClient) ShortenURLBatch(ctx context.Context, opts ...grpc.CallOption) (URLShortenerService_ShortenURLBatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &URLShortenerService_ServiceDesc.Streams[0], URLShortenerService_ShortenURLBatch_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &uRLShortenerServiceShortenURLBatchClient{stream}
	return x, nil
}

type URLShortenerService_ShortenURLBatchClient interface {
	Send(*BatchRequest) error
	Recv() (*BatchResponse, error)
	grpc.ClientStream
}

type uRLShortenerServiceShortenURLBatchClient struct {
	grpc.ClientStream
}

func (x *uRLShortenerServiceShortenURLBatchClient) Send(m *BatchRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *uRLShortenerServiceShortenURLBatchClient) Recv() (*BatchResponse, error) {
	m := new(BatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *uRLShortenerServiceClient) GetURLsByUserID(ctx context.Context, in *Request, opts ...grpc.CallOption) (URLShortenerService_GetURLsByUserIDClient, error) {
	stream, err := c.cc.NewStream(ctx, &URLShortenerService_ServiceDesc.Streams[1], URLShortenerService_GetURLsByUserID_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &uRLShortenerServiceGetURLsByUserIDClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type URLShortenerService_GetURLsByUserIDClient interface {
	Recv() (*BatchByUserIDResponse, error)
	grpc.ClientStream
}

type uRLShortenerServiceGetURLsByUserIDClient struct {
	grpc.ClientStream
}

func (x *uRLShortenerServiceGetURLsByUserIDClient) Recv() (*BatchByUserIDResponse, error) {
	m := new(BatchByUserIDResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *uRLShortenerServiceClient) DeleteURLs(ctx context.Context, opts ...grpc.CallOption) (URLShortenerService_DeleteURLsClient, error) {
	stream, err := c.cc.NewStream(ctx, &URLShortenerService_ServiceDesc.Streams[2], URLShortenerService_DeleteURLs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &uRLShortenerServiceDeleteURLsClient{stream}
	return x, nil
}

type URLShortenerService_DeleteURLsClient interface {
	Send(*Request) error
	CloseAndRecv() (*Response, error)
	grpc.ClientStream
}

type uRLShortenerServiceDeleteURLsClient struct {
	grpc.ClientStream
}

func (x *uRLShortenerServiceDeleteURLsClient) Send(m *Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *uRLShortenerServiceDeleteURLsClient) CloseAndRecv() (*Response, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *uRLShortenerServiceClient) GetStats(ctx context.Context, in *Request, opts ...grpc.CallOption) (*StatsResponse, error) {
	out := new(StatsResponse)
	err := c.cc.Invoke(ctx, URLShortenerService_GetStats_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// URLShortenerServiceServer is the server API for URLShortenerService service.
// All implementations must embed UnimplementedURLShortenerServiceServer
// for forward compatibility
type URLShortenerServiceServer interface {
	ShortenURL(context.Context, *Request) (*Response, error)
	GetURL(context.Context, *Request) (*Response, error)
	ShortenURLBatch(URLShortenerService_ShortenURLBatchServer) error
	GetURLsByUserID(*Request, URLShortenerService_GetURLsByUserIDServer) error
	DeleteURLs(URLShortenerService_DeleteURLsServer) error
	GetStats(context.Context, *Request) (*StatsResponse, error)
	mustEmbedUnimplementedURLShortenerServiceServer()
}

// UnimplementedURLShortenerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedURLShortenerServiceServer struct {
}

func (UnimplementedURLShortenerServiceServer) ShortenURL(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShortenURL not implemented")
}
func (UnimplementedURLShortenerServiceServer) GetURL(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetURL not implemented")
}
func (UnimplementedURLShortenerServiceServer) ShortenURLBatch(URLShortenerService_ShortenURLBatchServer) error {
	return status.Errorf(codes.Unimplemented, "method ShortenURLBatch not implemented")
}
func (UnimplementedURLShortenerServiceServer) GetURLsByUserID(*Request, URLShortenerService_GetURLsByUserIDServer) error {
	return status.Errorf(codes.Unimplemented, "method GetURLsByUserID not implemented")
}
func (UnimplementedURLShortenerServiceServer) DeleteURLs(URLShortenerService_DeleteURLsServer) error {
	return status.Errorf(codes.Unimplemented, "method DeleteURLs not implemented")
}
func (UnimplementedURLShortenerServiceServer) GetStats(context.Context, *Request) (*StatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedURLShortenerServiceServer) mustEmbedUnimplementedURLShortenerServiceServer() {}

// UnsafeURLShortenerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to URLShortenerServiceServer will
// result in compilation errors.
type UnsafeURLShortenerServiceServer interface {
	mustEmbedUnimplementedURLShortenerServiceServer()
}

func RegisterURLShortenerServiceServer(s grpc.ServiceRegistrar, srv URLShortenerServiceServer) {
	s.RegisterService(&URLShortenerService_ServiceDesc, srv)
}

func _URLShortenerService_ShortenURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLShortenerServiceServer).ShortenURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLShortenerService_ShortenURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLShortenerServiceServer).ShortenURL(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLShortenerService_GetURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLShortenerServiceServer).GetURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLShortenerService_GetURL_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLShortenerServiceServer).GetURL(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _URLShortenerService_ShortenURLBatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(URLShortenerServiceServer).ShortenURLBatch(&uRLShortenerServiceShortenURLBatchServer{stream})
}

type URLShortenerService_ShortenURLBatchServer interface {
	Send(*BatchResponse) error
	Recv() (*BatchRequest, error)
	grpc.ServerStream
}

type uRLShortenerServiceShortenURLBatchServer struct {
	grpc.ServerStream
}

func (x *uRLShortenerServiceShortenURLBatchServer) Send(m *BatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *uRLShortenerServiceShortenURLBatchServer) Recv() (*BatchRequest, error) {
	m := new(BatchRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _URLShortenerService_GetURLsByUserID_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(URLShortenerServiceServer).GetURLsByUserID(m, &uRLShortenerServiceGetURLsByUserIDServer{stream})
}

type URLShortenerService_GetURLsByUserIDServer interface {
	Send(*BatchByUserIDResponse) error
	grpc.ServerStream
}

type uRLShortenerServiceGetURLsByUserIDServer struct {
	grpc.ServerStream
}

func (x *uRLShortenerServiceGetURLsByUserIDServer) Send(m *BatchByUserIDResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _URLShortenerService_DeleteURLs_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(URLShortenerServiceServer).DeleteURLs(&uRLShortenerServiceDeleteURLsServer{stream})
}

type URLShortenerService_DeleteURLsServer interface {
	SendAndClose(*Response) error
	Recv() (*Request, error)
	grpc.ServerStream
}

type uRLShortenerServiceDeleteURLsServer struct {
	grpc.ServerStream
}

func (x *uRLShortenerServiceDeleteURLsServer) SendAndClose(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *uRLShortenerServiceDeleteURLsServer) Recv() (*Request, error) {
	m := new(Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _URLShortenerService_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(URLShortenerServiceServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: URLShortenerService_GetStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(URLShortenerServiceServer).GetStats(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

// URLShortenerService_ServiceDesc is the grpc.ServiceDesc for URLShortenerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var URLShortenerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "urlshortener.URLShortenerService",
	HandlerType: (*URLShortenerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShortenURL",
			Handler:    _URLShortenerService_ShortenURL_Handler,
		},
		{
			MethodName: "GetURL",
			Handler:    _URLShortenerService_GetURL_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _URLShortenerService_GetStats_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ShortenURLBatch",
			Handler:       _URLShortenerService_ShortenURLBatch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "GetURLsByUserID",
			Handler:       _URLShortenerService_GetURLsByUserID_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeleteURLs",
			Handler:       _URLShortenerService_DeleteURLs_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "grpc.proto",
}
